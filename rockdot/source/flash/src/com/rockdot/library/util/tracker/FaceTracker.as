/*Copyright (c) 2008 Alexander Milde (alexmilde@web.de)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package com.rockdot.library.util.tracker {	import de.jvm.next.hid.camera.observer.controller.Pattern_Controller;	import de.jvm.next.hid.camera.observer.utils.Pattern;	import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * The Object2D class can follow the face or any other complex bitmap.	 * <br><br>	 * The tracking is based on a differnce bitmap algorithm that compares the referencebitmap	 * with the current videoframe. where the bitmap with the highest similarity is found the 	 * reference bitmapframe moves there.	 * 	 * @author Alexander Milde	 * 	 */	public class FaceTracker  extends AbstractTracker {		// ______________________________________________________________________________________________________		// Vars		//		// pattern properties		private var _pc1 : Pattern_Controller;		private var _pa1 : Pattern;		private var _paWidth : Number;		private var _paHeight : Number;		private var _paX : Number;		private var _paY : Number;		private var resDynamic : Pattern;		private var _startRect : Rectangle;		// return values		private var _x : Number = 0;		private var _y : Number = 0;		private var _z : Array = [10, 20];		// ______________________________________________________________________________________________________		// Construct		//		public function FaceTracker(bmd : BitmapData) {			super(bmd);			_startRect = new Rectangle(120, 80, 70, 80);			_paWidth = _width = _startRect.width;			_paHeight = _height = _startRect.height;			_paX = _startRect.x;			_paY = _startRect.y;			_pc1 = new Pattern_Controller(_paWidth, _paHeight);		}		public function init() : void {			_pa1 = new Pattern(_paX, _paY, _paWidth, _paHeight, _bmd);		}		override public function update() : void {			track(new Point());		}		// ==================================================================		/**		 * tracks face at the given position		 * @param	pos		 */		override public function track(pos : Point) : void {			// _refPattern damit man wei√ü wo das pattern gerade ist			//			_pc1.addAnalysePatterns(1, 2, _bmd, _pa1);			resDynamic = _pc1.mostSimilarPatternCoords(_pa1);			_x = resDynamic.x + (_paWidth / 2);			_y = resDynamic.y + (_paHeight / 2);			_pa1.x = resDynamic.x;			_pa1.y = resDynamic.y;			_z[0] = _pa1.x;			_z[1] = _pa1.x + _pa1.width;			super.track(new Point(this.x, this.y));		}		// ______________________________________________________________________________________________________		// Return values		//		public function get y() : Number {			return _y;		}		public function get x() : Number {			return _x;		}		public function debugFrame() : void{			for (var i : Number = _startRect.y;i < _startRect.height + _startRect.y; i++) {				for (var j : Number = _startRect.x;j < _startRect.width + _startRect.x; j++) {					// draw frame					//					if (j == _startRect.x || j == (_startRect.width + _startRect.x - 1)) {						_bmd.setPixel32(j, i, 0xff0000ff);					}					if (i == _startRect.y || i == (_startRect.height + _startRect.y - 1)) {						_bmd.setPixel32(j, i, 0xff0000ff);					}				}			}			for (var l : Number = _pa1.y;l < _pa1.height + _pa1.y; l++) {				for (var w : Number = _pa1.x;w < _pa1.width + _pa1.x; w++) {					// draw frame					//					if (w == _pa1.x || w == (_pa1.width + _pa1.x - 1)) {						_bmd.setPixel32(w, l, 0xff0000ff);					}					if (l == _pa1.y || l == (_pa1.height + _pa1.y - 1)) {						_bmd.setPixel32(w, l, 0xff0000ff);					}				}			}		}		//		//		//	}}