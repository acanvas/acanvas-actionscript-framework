package com.rockdot.plugin.facebook.command {	import com.facebook.graph.data.FacebookSession;	import com.rockdot.core.model.RockdotConstants;	import com.rockdot.core.mvc.RockdotEvent;	import com.rockdot.plugin.facebook.airhack.FacebookAIR;	import com.rockdot.plugin.screen.common.inject.ScreenServiceAware;	import com.rockdot.plugin.screen.common.service.IScreenService;	import flash.geom.Rectangle;	public class FBLoginStageWebViewCommand extends AbstractFBCommand implements ScreenServiceAware {		protected static const LAYER_WIDTH_MAX : int = 480;		protected static const LAYER_HEIGHT_MAX : int = 600;				private var _uiService : IScreenService;		override public function execute(event : RockdotEvent = null) : * {			super.execute(event);			// dispatchMessage("notification.facebook.permission");			if (FacebookAIR.getSession() && FacebookAIR.getSession().accessToken && _fbModel.userIsAuthenticated && event.data == "" ) {				_handleLogin(FacebookAIR.getSession());			} else {				// XXX The window size calculation of the Facebook lib is buggy								var rw : int = Math.min(LAYER_WIDTH_MAX, RockdotConstants.WIDTH_STAGE - 20);				var rh : int = Math.min(LAYER_HEIGHT_MAX, RockdotConstants.HEIGHT_STAGE - 20);				var rx : int = _uiService.stage.stageWidth / 2 - rw / 2;				var ry : int = _uiService.stage.stageHeight / 2 - rh / 2;				FacebookAIR.login(_handleLogin, new Rectangle(rx, ry, rw, rh), event.data is Array ? event.data : event.data.split(","));			}		}		private function _handleLogin(response : Object, fail : Object = null) : void {			if (response) {				_fbModel.userIsAuthenticated = true;				_fbModel.session = response as FacebookSession;				dispatchCompleteEvent(response);			} else {				if (!fail || fail is String) {				} else {					fail = fail.error.message;				}				log.error("Not Connected: " + fail);				dispatchErrorEvent(fail);			}		}		public function set uiService(uiService : IScreenService) : void {			_uiService = uiService;		}	}}