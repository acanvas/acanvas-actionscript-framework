/*Copyright (c) 2008 Alexander Milde (alexmilde@web.de)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package de.jvm.next.hid.camera.observer.utils {	import flash.geom.Rectangle;		/**	 * SpecialMath performs Math operations which are not implementet in	 * the regular math class	 * 	 * @author Alexander Milde	 */	 	public class SpecialMath 	{			public static function rectangleSimilarityIndex(rect1 : Rectangle, rect2 : Rectangle) : Number		{			var diffX : Number; 			var diffY : Number;			var diffSize : Number;						diffX = Math.abs(rect1.x - rect2.x);			diffY = Math.abs(rect1.y - rect2.y);			diffSize = Math.abs((rect1.width * rect1.height) - (rect2.width * rect2.height));						var ret : Number = (diffX*10) + (diffY*10);			return ret;		}		/**		 * Calculates the avarage of an array		 * 		 * 		 */			public static function avg(histogram : Array) : Number		{			var max : int = histogram.length;			var i : int = 0;			var ret : Number = 0;										while(i < max)			{				ret += histogram[i];				i++;			}						return ret/max;		}						/**		 * Finds the minimum position and value in an array		 * 		 * @param histogram array		 * 		 * @return array with position and value		 * 		 */			public static function findMinimum(histogram : Array) : Array		{			var max : int;			var max1: int = histogram.length;			var ret : Array = new Array();			var i : int = 0;			ret.push(0);			ret.push(0);										while(i < max1)			{				if((histogram[i] < max) || i == 0)				{					max = histogram[i];					ret[0] = i;					ret[1] = max;				}								i++;			}						return ret;		}						/**		 * Creates a simple checksum		 * 		 */			public static function rectChecksum(rect : Rectangle) : Number		{			// simple checksum			return (rect.x + rect.y + rect.width + rect.height);		}				/**		 * Calculates the diffrence of two boolean arrays		 * 		 * @param _arr1 array with boolean values		 * @param _arr2 array with boolean values		 * 		 * @return integer of activity		 * 		 */			public static function compareBooleanArrays(_arr1 : Array, _arr2 : Array) : int		{			if(_arr1.length == _arr2.length)			{				var i : int = 0;				var max : int = _arr1.length;				var ret : int = 0;								while(i < max)				{					if(_arr1[i] != _arr2[i])						ret++;					i++;				}				return ret;			}			else			{				return -1;			}					}	}//////}