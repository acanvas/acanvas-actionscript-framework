/*Copyright (c) 2008 Alexander Milde (alexmilde@web.de)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package de.jvm.next.hid.camera.observer.utils {	import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;		/**	 * provides bitmapdata and infos 	 * about the pattern	 *  	 * @author Alexander Milde	 * 	 */	 	 	public class Pattern 	{// ______________________________________________________________________________________________________// 																					   				 Vars//			private var _pPosX 		: Number;		private var _pPosY 		: Number;		private var _pWidth 	: Number;		private var _pHeight	: Number;		private var _scaleFact	: Number = 1;		private var _rect		: Rectangle;		private var _pt			: Point = new Point(0, 0);		private var _retBmd 	: BitmapData;		// ______________________________________________________________________________________________________// 																					   	 		Construct//				public function Pattern(pX : Number, pY : Number, pW : Number, pH : Number, pB : BitmapData)		{			// better performance			//			initf(pX, pY, pW, pH, pB);		}				private function initf(pX : Number, pY : Number, pW : Number, pH : Number, pB : BitmapData) : void		{			_pPosX 		= pX;			_pPosY 		= pY;			_pWidth 	= pW;			_pHeight 	= pH;						_rect = new Rectangle(_pPosX, _pPosY, _pWidth, _pHeight);						_retBmd = new BitmapData(_pWidth, _pHeight, true, 0xffffffff);						drawBmd(pB);		}		// ______________________________________________________________________________________________________// 																					   	  Draw BitmapData//				private function drawBmd(pB : BitmapData) : void		{			_retBmd.copyPixels(pB, _rect, _pt);						}		// ______________________________________________________________________________________________________// 																					   	  Getter / Setter//		public function get bmd() : BitmapData		{			return _retBmd;		}				public function set bmd(pB : BitmapData) : void		{			drawBmd(pB);		}						public function get height() : Number		{			return _pHeight;		}				public function get width() : Number		{			return _pWidth;		}				public function get y() : Number		{			return _pPosY;		}				public function get x() : Number		{			return _pPosX;		}				public function set x(pPosX : Number) : void		{			_pPosX = pPosX;		}				public function set y(pPosY : Number) : void		{			_pPosY = pPosY;		}				public function get scaleFact() : Number		{			return _scaleFact;		}				public function set scaleFact(scaleFact : Number) : void		{			_scaleFact = scaleFact;		}		//////			}}