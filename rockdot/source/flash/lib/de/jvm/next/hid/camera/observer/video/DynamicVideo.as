/*Copyright (c) 2008 Alexander Milde (alexmilde@web.de)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package de.jvm.next.hid.camera.observer.video {	import flash.filters.BlurFilter;	import flash.filters.ColorMatrixFilter;	import flash.filters.ConvolutionFilter;	import flash.media.Camera;	import flash.media.Video;		/**	 * The DynamicVideo class holds information about the Camera	 * and provides the video object	 * 	 * @author Alexander Milde	 * 	 */	public class DynamicVideo 	{		private	var _cam : Camera = new Camera();		private	var _video : Video;		private var _height : int;		private var _width : int;		private var _frames : int;		private var _resolution : Number;		/**		 * Create the videoobject in a specific size and framerate		 * 		 * @param width The width of the video		 * @param fps The framerate the camera is running at		 * 		 */			 			public function DynamicVideo(width : int = 160, fps : int = 12)		{			_cam = Camera.getCamera();			setCamQuality(width, fps);						_resolution = _cam.width * _cam.height;			_video = new Video(_cam.width, _cam.height);			_video.attachCamera(_cam);		}		/**		 * Apply multiple filters to the video		 * 		 * @param clrMatFilt ColorMatrixFilter		 * @param blrFilt BlurFilter		 * @param convFilt ConvolutionFilter		 */			 					public function applyFilterSet(clrMatFilt : ColorMatrixFilter = null, blrFilt : BlurFilter = null, convFilt : ConvolutionFilter = null) : void		{			var tmp_filterArr : Array = new Array();						if(clrMatFilt != null)				tmp_filterArr.push(clrMatFilt);						if(blrFilt != null)				tmp_filterArr.push(blrFilt);			if(convFilt != null)				tmp_filterArr.push(convFilt);						_video.filters = tmp_filterArr;						}		/**		 * Remove all filters		 */			 		public function removeFilterSet() : void		{			var tmp_filterArr : Array = new Array();				_video.filters = tmp_filterArr;						}		/**		 * Set the quality of the camera		 * 		 * @param width The width of the video		 * @param fps The framerate the camera is running at		 */			 				private function setCamQuality(width : int, fps : int) : void		{			var height : int = Math.round(width - (width/4));						_cam.setMode(width, height, fps);			_height = _cam.height;			_width = _cam.width;			_frames = fps;			}		/**		 * @return video Returns the video object		 */				public function get video() : Video		{			return _video;		}						/**		 * @return height Returns the height		 */		 				public function get height() : int		{			return _height;		}						/**		 * @return width Returns the width		 */		public function get width() : int		{			return _width;		}						/**		 * @return frames Returns the set framerate		 * this might not be the real framerate		 * 		 */		public function get frames() : int		{			return _frames;		}						/**		 * @return resolution Returns the resolution		 */				public function get resolution() : Number		{			return _resolution;		}					/**		 * @return currentFps Returns real framerate		 */			public function get currentFps() : Number		{			return _cam.currentFPS;		}	}}