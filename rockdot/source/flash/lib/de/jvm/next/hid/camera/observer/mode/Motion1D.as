/*Copyright (c) 2008 Alexander Milde (alexmilde@web.de)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package de.jvm.next.hid.camera.observer.mode {	import de.jvm.next.hid.camera.observer.utils.BitmapDataAnalyser;	import de.jvm.next.hid.camera.observer.video.DynamicVideo;	import flash.display.BitmapData;	/**	 * Pushes the current and previous webcamframe to	 * the algorithm object. the algorithm object returns	 * a 2 dimensional array of aktive points	 * 	 * @author Alexander Milde	 * 	 */	 	public class Motion1D implements IVideoObserver	{		// Instance the CameraObject		//		private var _camera : DynamicVideo;		// Analyse vars		//		private var bmd				: BitmapData;		private var bmdBefore		: BitmapData;		private var _bmdDebug		: BitmapData;		private var _resArr			: Array = new Array();				// Counter Vars		// 		private var pixelCountLeft	: Number;		private var pixelCountRight	: Number;				// Return Vars		private var _left			: Number;		private var _right			: Number;		private var _activeSide		: String = "undefined";				private var LEFT			: String = "left";		private var RIGHT			: String = "right";		private var UNDEFINED		: String = "undefined";		// track the motion direction		//			private var _mtnDirection1	: String = UNDEFINED;		private var _mtnStrength1	: int = 0;		private var _mtnDirection2	: String = UNDEFINED;		private var _mtnStrength2	: int = 0;		private var _mtnCnt			: int = 0;		private var _motionDirection: int = 0;		public function Motion1D(width : int = 160, fps : int = 30) : void		{			_camera = new DynamicVideo(width, fps);			bmd 			= new BitmapData(_camera.width, _camera.height);			bmdBefore 		= new BitmapData(_camera.width, _camera.height);			_bmdDebug		= new BitmapData(_camera.width, _camera.height);		}		public function analyse() : void		{			bmd.draw(_camera.video);			_resArr = BitmapDataAnalyser.differncePixelArray(bmdBefore, bmd);			bmdBefore.draw(_camera.video);				pixelCountLeft = 0;			pixelCountRight = 0;			if(_resArr.length != 0)			{				for (var i : Number = 0;i < _camera.height; i++) 				{					for (var j : Number = 0;j < (_camera.width / 2); j++) 					{						if(_resArr[i][j] == 1)							pixelCountRight++;					}					for (var r : Number = _camera.width / 2;r < _camera.width; r++) 					{						if(_resArr[i][r] == 1)							pixelCountLeft++;					}									}			}			// in percent			//			var tmpLeft : Number = Math.round((pixelCountLeft / (_camera.resolution/ 2)) * 100);					if(pixelCountLeft <= 1)				 tmpLeft = _left;			else								_left = tmpLeft;						// in percent			//			var tmpRight : Number = Math.round((pixelCountRight / (_camera.resolution/ 2)) * 100);					if(pixelCountRight <= 1)				 tmpRight = _right;			else								_right = tmpRight;									// catch initialising failures			if(_right + _left > 190)			{				_right = 0;				_left = 0;			}									if(_left > _right)			{				_activeSide = LEFT;				_motionDirection = getMotionDirection(_activeSide, left);			}							else if(_left < _right)			{				_activeSide = RIGHT;				_motionDirection = getMotionDirection(_activeSide, right)*-1;			}			else			{				_activeSide = UNDEFINED;				_motionDirection = getMotionDirection(_activeSide, 0);				_motionDirection = 0;			}				}		private function getMotionDirection(activeSide : String, strength : int) : int		{			if(_mtnCnt == 0)			{				_mtnDirection1 = activeSide;				_mtnStrength1 = strength;				_mtnCnt++;			}			else			{				_mtnDirection2 = activeSide;				_mtnStrength2 = strength;				_mtnCnt = 0;			}									var tmpStrength : int = _mtnStrength1 + _mtnStrength2;						//			// lookup if there was a motion			if(_mtnDirection1 != UNDEFINED && _mtnDirection2 != UNDEFINED)			{				if(_mtnDirection1 != _mtnDirection2)				{					return tmpStrength;				}				else				{					tmpStrength = 0;				}			}			return tmpStrength;					}		//		// CONFIG AND RETURN VALUES		// ________________________________________________________________________________________________								public function get left() : Number		{			return _left;		}						public function get right() : Number		{			return _right;		}						public function get activeSide() : String		{			return _activeSide;		}						public function get bmdDebug() : BitmapData		{			_bmdDebug = new BitmapData(_camera.width, _camera.height, false, 0x000000);			if(_resArr.length != 0)			{				for (var i : Number = 0;i < _camera.height; i++) 				{					for (var j : Number = 0;j < (_camera.width / 2); j++) 					{						if(_resArr[i][j] == 1)							_bmdDebug.setPixel(j, i, 0x001C00);					}					for (var r : Number = _camera.width / 2;r < _camera.width; r++) 					{						if(_resArr[i][r] == 1)							_bmdDebug.setPixel(r, i, 0x001C00);					}									}			}			return _bmdDebug;		}				/**		 * This function can be unstable when there's too much noise in the		 * background or when the motion is to fast / slow		 */		public function get motionDirection() : int		{			return _motionDirection;		}	}}