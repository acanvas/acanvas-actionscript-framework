/*Copyright (c) 2008 Alexander Milde (alexmilde@web.de)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package de.jvm.next.hid.camera.observer.mode {	import de.jvm.next.hid.camera.observer.utils.Color;	import de.jvm.next.hid.camera.observer.video.DynamicVideo;	import flash.display.BitmapData;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * The ColorKeying mode supports objecttracking by its color	 * <br><br>	 * The more the color of the object differs from the background, the better it works.<br>	 * After keying the color a rectangle returns the size and position of the keyed object.	 * <br><br>	 * There is also a possibility to influence the colorrange to get better results 	 * 	 * @author Alexander Milde	 *	 */	 	public class AdvancedColorKeying 	{		private var _camera : DynamicVideo;		private var _videoFrame : BitmapData;				private var _rect : Rectangle = new Rectangle();		private var _videoSize : Rectangle = new Rectangle();		private var _color : Color = new Color();		private var _colorSet : Boolean = false;					private var _fillColor:uint = 0xffffff00;		private var _range : int = 20;				//		// return values		private var _x : int = 0;		private var _y : int = 0;		private var _width : int = 0;		private var _height : int = 0; 						public function AdvancedColorKeying(videoHeight : int = 160, fps : int = 12)		{					_camera = new DynamicVideo(videoHeight, fps);					_videoSize = new Rectangle(0, 0, _camera.width, _camera.height);				_videoFrame = new BitmapData(_camera.width, _camera.height, true, 0xff000000);		}				/**		 * When the searchcolor was set threshold over each colorchannel with a defined range.		 * <br><br>		 * The non active parts become filled with a transparent color.		 * <br><br>		 * The method getColorBoundsRect is used to find a rectangle in which the active color is		 * <br><br>		 * After creating the rectangle the return values x, y, width, height are set		 * 		 */		public function analyse() : void		{			_videoFrame.draw(_camera.video);						if(_colorSet)			{						var clrInt : int;						var tmpColor : Color = new Color();				// red				//				var maskColor:uint = 0x00FF0000;				clrInt = calculateColor(_color.redNr-_range);				tmpColor.setColorRGB(clrInt, 255, 255); 				_videoFrame.threshold(_videoFrame, _videoSize, new Point(), "<", tmpColor.color, _fillColor, maskColor, true);				clrInt = calculateColor(_color.redNr+_range);							tmpColor.setColorRGB(clrInt, 255, 255); 				_videoFrame.threshold(_videoFrame, _videoSize, new Point(), ">", tmpColor.color, _fillColor, maskColor, true);				// green				//				maskColor = 0x0000FF00; 				clrInt = calculateColor(_color.greenNr-_range);				tmpColor.setColorRGB(255, clrInt, 255); 				_videoFrame.threshold(_videoFrame, _videoSize, new Point(), "<", tmpColor.color, _fillColor, maskColor, true);				clrInt = calculateColor(_color.greenNr+_range);				tmpColor.setColorRGB(255, clrInt, 255); 				_videoFrame.threshold(_videoFrame, _videoSize, new Point(), ">", tmpColor.color, _fillColor, maskColor, true);				// blue				//				maskColor = 0x000000FF; 				clrInt = calculateColor(_color.blueNr-_range);							tmpColor.setColorRGB(255, 255, clrInt); 				_videoFrame.threshold(_videoFrame, _videoSize, new Point(), "<", tmpColor.color, _fillColor, maskColor, true);				clrInt = calculateColor(_color.blueNr+_range);					tmpColor.setColorRGB(255, 255, clrInt); 				_videoFrame.threshold(_videoFrame, _videoSize, new Point(), ">", tmpColor.color, _fillColor, maskColor, true);							// create rect				//				_rect = getBlob(_videoFrame);								// calculate the return values				//				calculateReturnValues(_rect);			}		}						private function calculateReturnValues(rect : Rectangle) : void		{			_x = rect.x + (rect.width / 2);			_y = rect.y + (rect.height / 2);			_width = rect.width;			_height = rect.height;		}				private function calculateColor(val : Number) : int		{			if(val < 0)				val = 0;						if(val > 255)				val = 255;								return val;		}		//				// BLOB DETECTION		// ______________________________________________________________________________________________				private function getBlob(_videoFrame : BitmapData) : Rectangle		{			var rect2 : Rectangle = _videoFrame.getColorBoundsRect(_fillColor, _fillColor, false);					return rect2;		}						//		// CONFIG VALUES		// ________________________________________________________________________________________________				public function set color(color : Color) : void		{			_colorSet = true;			_color = color;		}						public function get color() : Color		{			return _color;		}						public function get colorSet() : Boolean		{			return _colorSet;		}						public function set range(range : int) : void		{			_range += range;		}						//		// RETURN VALUES		// ________________________________________________________________________________________________				public function getVideoframe() : BitmapData		{			_videoFrame.draw(_camera.video);			//drawRect(_rect);			return _videoFrame;					}		public function get x() : int		{			return _x;		}						public function get y() : int		{			return _y;		}						public function get width() : int		{			return _width;		}						public function get height() : int		{			return _height;		}						public function get range() : int		{			return _range;		}						public function get rect() : Rectangle		{			return _rect;		}	}}	