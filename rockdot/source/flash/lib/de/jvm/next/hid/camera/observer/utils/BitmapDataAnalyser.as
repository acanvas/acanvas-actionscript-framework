/*Copyright (c) 2008 Alexander Milde (alexmilde@web.de)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package de.jvm.next.hid.camera.observer.utils {	import flash.display.BitmapData;	import flash.geom.ColorTransform;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.geom.Rectangle;	/** 	 * BitmapData Analyser<br>	 * provides features to get detai-	 * led information about bitmap-	 * data or twodimensional arrays.	 * theses arrays can be used to 	 * create color histograms	 * 	 * @author Alexander Milde	 */	 	 	 	public class BitmapDataAnalyser 	{		private	static var clr0	: uint 				= 0xffff0000;		private static var clr1	: uint 				= 0xff111111;		private static var mat		: Matrix			= new Matrix();		private static var clrTr	: ColorTransform	= new ColorTransform();		/**		 * Count the active pixels		 * 		 * @param _p1 bitmapData		 * @param _p1 bitmapData		 * 		 * @return number of activity 0 - 100		 * 		 */				public static function getActivePixelCount(_p1 : BitmapData, _p2 : BitmapData) : int		{			var rect : Rectangle = new Rectangle(0, 0, _p1.width, _p1.height);					_p1.draw(_p2, mat, clrTr, 'difference');			_p1.threshold(_p1,rect,new Point(),'>', clr1, clr0);						// count all active pixel in that image			//			var	ret : int = 0;					ret = Math.round(activity(_p1, clr0)*100);											return ret;		}		/**		 * create a historam on x axis		 * 		 * @param twodimensional array		 * 		 * @return onedimensional array		 * 		 */			public static function getXHistogram(arr : Array) : Array		{			var res : Array = new Array();			var tmpVal : Number = 0;									/*			 * histogram			 *			 * 0001000			 * 1101100			 * 0011010			 * -------			 * 1113110			 */				 			for (var j : Number = 0; j < arr[0].length; j++) 			{						tmpVal = 0;				for (var i : Number = 0; i < arr.length; i++) 				{					tmpVal += arr[i][j];					}				res.push(tmpVal);			}						if(arr[0].length == 0)				res.push(0);						return res;		}				/**		 * create a historam on x axis		 * 		 * @param twodimensional array		 * 		 * @return onedimensional array		 * 		 */			 		public static function getYHistogram(arr : Array) : Array		{			var res : Array = new Array();			var tmpVal : Number = 0;							/*			 * histogram			 *			 * 0001000 |1			 * 1101100 |4			 * 0011010 |3			 * 			 */				 			for (var j : Number = 0; j < arr.length; j++) 			{						tmpVal = 0;							for (var i : Number = 0; i < arr[0].length; i++) 				{					tmpVal += arr[j][i];					}				res.push(tmpVal);			}						return res;		}			/**		 * array with active pixels		 * 		 * @param bmdBefore bitmapData		 * @param bmd bitmapData		 * 		 * @return twodimensional array		 * 		 */			public static function differncePixelArray(bmdBefore : BitmapData, bmd : BitmapData) : Array		{			var rect : Rectangle = new Rectangle();			rect.width = bmd.width;			rect.height = bmd.height;			bmd.draw(bmdBefore,new Matrix(),new ColorTransform(),'difference');			bmd.threshold(bmd,rect,new Point(),'>',0xff336699,0xffff0000);					var	arr : Array = new Array();								// check for empty data			//			var isEmpty : Boolean = true;						// lineloop			//			for(var j:Number = 0; j< bmd.height; j++)			{				// left to right loop				//				var line : Array = new Array();				for(var r:Number = 0;r < bmd.width; r++)				{					if((bmd.getPixel(r, j).toString(16) != "ff0000"))						line.push(0);					else					{							isEmpty = false;							line.push(1);								}				}							arr.push(line);			}						//			// complete empty array? take old one			if(isEmpty)			{				arr = new Array();			}			else			{				arr;			}						// twodimensional array			//						return arr;		}			/**		 * create difference bitmapData		 * 		 * @param bmdBefore bitmapData		 * @param bmd bitmapData		 * 		 * @return bitmapData with highlighted motion		 * 		 */				public static function differenceBitmapData(bmdBefore : BitmapData, bmd : BitmapData) : BitmapData		{			var rect : Rectangle = new Rectangle();			rect.width = bmd.width;			rect.height = bmd.height;			bmd.draw(bmdBefore,new Matrix(),new ColorTransform(),'difference');			bmd.threshold(bmd,rect,new Point(),'>',0xff111111,0xffff0000);			return bmd;		}				/**		 * calculates the activity of a differenceBitmapData		 * 		 * @param _bmd bitmapData		 * @param clr searchcolor		 * 		 * @return number with activity		 * 		 */				public static function activity(_bmd : BitmapData, clr : uint) : Number		{			var tmp : Number = 0;			var resolution : Number = _bmd.width * _bmd.height;			var xMax : Number = _bmd.width;			var yMax : Number = _bmd.height;			var i : int = 0;									while(i < yMax)			{				var j : int = 0;				while(j < xMax)				{					if(_bmd.getPixel32(j, i) == clr)					tmp++;					j++;				}				i++;			}					var ret : Number = tmp/resolution;			return ret;		}		/**		 * calculates the activity more detailed		 * 		 * @param _bmd bitmapData		 * 		 * @return number with activity		 * 		 */			public static function complexActivity(_bmd : BitmapData) : Number		{			var xMax : Number = _bmd.width;			var yMax : Number = _bmd.height;			var i : int = 0;						var ret : Number = 0;						// may cause performance problems			//var tmpColor : Color = new Color();						while(i < yMax)			{				var j : int = 0;				while(j < xMax)				{					//tmpColor.colorUint = _bmd.getPixel32(j, i);					ret += Number(_bmd.getPixel32(j, i))/10000000;					j++;				}				i++;			}					return ret;		}				/**		 * converts a black/white bitmapData into a boolean array		 * 		 * @param _bmd bitmapData		 * 		 * @return array with boolean values		 * 		 */					public static function convertToBooleanArr(_bmd : BitmapData) : Array		{			// funktionier nur für reine schwarz weiß bilder						var ret : Array = new Array();			var xMax : Number = _bmd.width;			var yMax : Number = _bmd.height;			var i : int = 0;						var BLACK : uint = 0xff000000;						while(i < yMax)			{				var j : int = 0;				while(j < xMax)				{					if(_bmd.getPixel32(j, i) == BLACK)						ret.push(false);					else						ret.push(true);					j++;				}				i++;			}									return ret;		}			//////					}}