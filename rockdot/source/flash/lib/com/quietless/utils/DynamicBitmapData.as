package com.quietless.utils {	import com.adobe.images.JPGEncoder;	import com.adobe.images.PNGEncoder;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.utils.ByteArray;	public class DynamicBitmapData extends Sprite {				protected var _image:ByteArray;		protected var _filename:String; 		protected var _bmd : BitmapData;		public function DynamicBitmapData(targ : BitmapData, sname : String, quality : Number = 80)		{			_filename = sname;						var ext:String = sname.substr(-3);			if (ext=='png') {				_image = PNGEncoder.encode(targ);			}	else if (ext=='jpg'){				_image = new JPGEncoder(quality).encode(targ);			}		    if (!_image) {		        dispatchEvent(new CustomEvent('ImageConversionFailure', targ+' could not be converted to BitmapData\n\n'+'***make sure file extension is either .jpg or .png***')); return;	        }		}				public function upload(script:String, directory:String=null, args:Object=null):void		{		    var wrapper:URLRequestWrapper = new URLRequestWrapper(_image, _filename, directory, args);		        wrapper.url = script;            var ldr:URLLoader = new URLLoader();                ldr.dataFormat = URLLoaderDataFormat.BINARY;                ldr.addEventListener(Event.COMPLETE, onLoadSuccess);                ldr.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);                ldr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);                ldr.load(wrapper.request);		}			//----------------------------------------------------------------//		private function onLoadSuccess(evt:Event):void		{			_image.clear();			dispatchEvent(new CustomEvent('onLoadSuccess', evt.target));		}				private function ioErrorHandler(evt:IOErrorEvent):void		{			dispatchEvent(new CustomEvent('onLoadFailure', 'Attempt to upload '+evt.target+' as Bitmap failed, check network connection.'));		}				private function onSecurityError(evt:SecurityErrorEvent):void		{			dispatchEvent(new CustomEvent('onSecurityError', 'A Flash Player security violation has occurred'));		}//----------------------------------------------------------------//		    				}	}