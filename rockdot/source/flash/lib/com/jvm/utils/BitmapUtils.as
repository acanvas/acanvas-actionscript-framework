package com.jvm.utils {	import com.jvm.geom.Dimension;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Graphics;	import flash.display.PixelSnapping;	import flash.errors.IllegalOperationError;	import flash.geom.Matrix;	public class BitmapUtils 	{		public static function takeSnapshot( obj:*, width:Number=0, height:Number=0 ):Bitmap		{			var bmp:Bitmap;						if( !(obj is DisplayObject) )			{//				throw( new IllegalArgumentException( " ERROR: The object to be taken a snapshot of is not a child of DisplayObject!") );			}						if( width == 0 && height == 0 )			{				width = obj.width;				height = obj.height;			}						if( width > 2880 || height > 2880 )			{				throw( new IllegalOperationError( " ERROR: The object to be taken a snapshot of is on at least one side larger than 2880 pixels!" ) );			}						var bmpData:BitmapData = new BitmapData( width, height, true, 0xFFFFFF );			bmpData.draw( obj );						bmp = new Bitmap( bmpData, "auto", true );						return bmp;		}						public static function drawSnapshot( graphics:Graphics, obj:*, width:Number=0, height:Number=0 ):void		{				if( !(obj is DisplayObject) )			{//				throw( new IllegalArgumentException( " ERROR: The object to be taken a snapshot of is not a child of DisplayObject!") );			}						if( obj.width > 2880 || obj.height > 2880 )			{				throw( new IllegalOperationError( " ERROR: The object to be taken a snapshot of is on at least one side larger than 2880 pixels!" ) );			}						if( width == 0 && height == 0 )			{				width = obj.width;				height = obj.height;			}						var bmpData:BitmapData = new BitmapData( width, height, true, 0xFFFFFFFF );			bmpData.draw( obj );						graphics.beginBitmapFill(bmpData);			graphics.drawRect(0,0,width,height);		}				static public const FULL_FILLED : String = "full_filled";		static public const FULL_IMAGE : String = "full_image";				/**		 * Skaliert und beschneidet ein Bild auf die gewünschte Größe.		 * 		 * @param bmp			BitmapData welches angepasst werden soll		 * @param targetWidth	Die gewünschte bzw. maximale Breite		 * @param targetHeight	Die gewünschte bzw. maximale Höhe		 * @param allowScaleUp	Soll das Bild auch hochskaliert werden (falls es zu klein wäre)		 * @param fillType		Die Art der Skalierung/des Beschnitts		 * 		 * @return BitmapData		 */		static public function crop ( bmp : BitmapData, targetWidth : Number, targetHeight : Number, allowScaleUp : Boolean = false, fillType : String = null ) : BitmapData		{			var dx : Number = targetWidth / bmp.width;			var dy : Number = targetHeight / bmp.height;			var scale : Number = 1;						// Calculate scaling			switch ( fillType )			{				case FULL_IMAGE:					// Skaliert ein Bild so, dass es zur Gänze in der geforderten Größe dargestellt wird. Die angegeben Dimensionen					// targetWidth und targetHeight definieren dabei die maximalen Ausmaße des späteren Bildes. 					scale = Math.min( dx, dy );					break;								default:					// FULL_FILLED					// Skaliert ein Bild so, dass die angegeben Dimensionen targetWidth und targetHeight vollständig ausgefüllt sind.					// Unter Umständen werden Teile des Bildes nach dem Skalieren abgeschnitten.					scale = Math.max( dx, dy );			}						if ( !allowScaleUp && scale > 1 )				scale = 1;							// Calculate image dimensions			var imageDimension : Dimension = new Dimension( Math.min( bmp.width * scale, targetWidth ), Math.min( bmp.height * scale, targetHeight ) );						// Drawing			var m : Matrix = new Matrix( scale, 0, 0, scale, ( imageDimension.width - bmp.width * scale ) * .5, ( imageDimension.height - bmp.height * scale ) * .5 );			var r : BitmapData = new BitmapData( imageDimension.width, imageDimension.height );			r.draw( bmp, m, null, null, null, true );			return r;		}				static public function getBitmapFromBitmapdata(swc : Class) : Bitmap {			return new Bitmap( new swc(0, 0), PixelSnapping.ALWAYS, true);		}		static public function getBitmapFromDisplayObject(dobj : DisplayObject) : Bitmap {						if(dobj is Bitmap){				return dobj as Bitmap;			}						var bmd : BitmapData;			var x : Number = 0;			var y : Number = 0;						if(dobj is BitmapData){				bmd = dobj as BitmapData;			}			else{				bmd = new BitmapData(dobj.width, dobj.height, true, 0x00000000);				bmd.draw(dobj);				x = dobj.x;				y = dobj.y;			}						var bm : Bitmap = new Bitmap(bmd);			bm.smoothing = true;			bm.x = x;			bm.y = y;			return bm;		}	}}